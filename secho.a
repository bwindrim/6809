		org	$E000

		lds	#$FDFF	; set up system stack
		bra	main

		include	"init.i"
		include	"via6522.i"
		include	"acia6551.i"
		include	"despatch.i"
		include	"stream.i"
;		include	"tick.i"
		include	"porta.i"
		include	"portb.i"
		include	"poll50.i"
		include	"toolbox.i"

stdin:		dw	portastream
stdout:		dw	portbstream
stderr:		dw	portbstream

		begin
intinit:	  ldd	#badint
		  ldx	#resetvec
		  lda	#16

initloop:	  std	,--x
		  deca
		  bne	initloop

		  bra	init

init		  redef	intinit
		end


main:		begin
		  jsr	startup

		  bsr	init

		  bsr	portstat

loopx:		  bsr	get_serial
		  bsr	put_serial
		  bra	loopx

		  begin
loop3:		    bsr		getchar_nw	; get next byte from port
		    tstb
		    sbeq	over1

		    cmpa	#1
		    sbne	over3

		    lda		#dtr | rx_int_disable | tx_disable_nrts
		    sta		acia_command
		    sbra	over1
		    
over3:		    cmpa	#2
		    sbne	over4

		    lda		#dtr | rx_int_disable | tx_disable_rts
		    sta		acia_command
		    sbra	over1

		    
over4:		    bsr		put_serial

over1:		    bsr		get_serial_nw
		    tstb
		    sbeq	over2

;		    cmpa	#13		; test for CR
;		    sbne	not_ret

;		    bsr		putchar		; if so then expand to CR-LF
;		    lda		#10
not_ret:	    bsr		putchar

over2:		    bra		loop3
		  end

loop2:		  bsr	getchar		; get next byte from port
		  bsr	put_serial
		  bra	loop2

loop1:		  bsr	get_serial
		  cmpa	#13		; test for CR
		  sbne	not_ret

		  bsr	putchar		; if so then expand to CR-LF
		  lda	#10
not_ret:	  bsr	putchar
		  bra	loop1

loop:		  bsr	getchar		; get next byte from port
		  cmpa	#'A'		; test for 'A'
		  sbne	over
		  lda	#'x'
over:		  bsr	put_serial
		  bsr	get_serial
		  bsr	putchar
		  bra	loop
		end

outbyte:	begin
		  pshs	b,cc
		  seif
		  sta	portb
loop:		  ldb	ifr
		  andb	#$10
		  beq	loop
		  puls	b,cc,pc
		end

outstring:	begin
loop:		  lda	,x+
		  sbeq	out
		  jsr	outbyte
		  bra	loop
out:		  rts
		end

		begin
message:	  db	"Hello", 13, 10, 0

startup		entry
		  ldx	#message
		  bsr	outstring
		end

		begin
message:	  db	"Tick7", 13, 10, 0

tick		entry
		  ldy	#message
		  lda	#7
		  bsr	putblk
		  rts
		end

		begin
message:	  db	"Bad!", 10, 13, 0

badint		entry
		  ldx	#message
loop:		  lda	,x+
		  sbeq	out
		  jsr	putchar
		  bra	loop

out:		  rti
		end

getchar:	begin
		  pshs		b,x,cc
		  ldx		stdin
		  getchar
		  puls		b,x,cc,pc
		end

getchar_nw:	begin
		  pshs		x,cc
		  ldx		stdin
		  getcharnw
		  puls		x,cc,pc
		end

putchar:	begin
		  pshs		b,x,cc
		  ldx		stdout
		  putchar
		  puls		b,x,cc,pc
		end

putcharnw:	begin
		  pshs		b,x,cc
		  ldx		stdout
		  putcharnw
		  puls		b,x,cc,pc
		end
ortstat:	begin
		  pshs		a
		  lda		acia_status
		  bsr		puthex
		  lda		#0
		  sta		acia_command
		  lda		acia_status
		  bsr		puthex
		  lda		#dtr | rx_int_disable | tx_disable_nrts
		  sta		acia_command
		  lda		acia_status
		  bsr		puthex
		  lda		#dtr | rx_int_disable | tx_disable_rts
		  sta		acia_command
		  lda		acia_status
		  bsr		puthex
		  puls		a,pc
		end	
