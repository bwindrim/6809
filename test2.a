		org	$E000

		lds	#$FDFF	; set up system stack
		jmp	main

		include		"vectors.i"
		include		"via6522.i"
		include		"acia6551.i"
		
message:	db	"Hello, this is your startup message!", 13, 10, 0
nmi_msg:	db	"NMI!", 13, 10, 0
tick_msg:	db	"tick", 13, 10, 0

VIA_PCR		equ		@10001000 ; port A & B handshake mode

good:		db	0


nmi_count:	db		3

nmi_isr:	begin		; NMI stacks the full register set
				inc		nmi_count
				rti
			end
nmi_chk:	begin		; uses atomic dec of nmi_count
				lda		nmi_count
				sbeq	exit		; return if nmi_count is zero
				dec		nmi_count
				ldx		#nmi_msg
				jsr		outstring
				lda		#'Y'
				sta		acia_tx
exit:			rts
			end

; constants for 1 second tick message rate
timeconst	equ		20000		; 10ms @ 2MHz
count:		db		100			; counts down in 10ms intervals

tick_chk:	begin
				lda		ifr		; read the VIA interrupt flags
				anda	#t1flag	; test for timer1
				sbeq	exit	; exit if not set
			
				lda		t1cl	; clear source of interrupt
				dec		count	; decrement count
				sbne	exit	; return if count not zero

				lda		#100	; reset the count
				sta		count
				ldx		#tick_msg
				jsr		outstring
				lda		#'X'
				sta		acia_tx
exit:			rts
			end

prev_bits	  db		0

uart_chk:	begin
				lda		acia_status
				anda	#rx_full
				sbeq	exit
				lda		acia_rx
				inca
				sta		acia_tx
exit:			rts
			end
			
main:		begin
				sei		; mask IRQ
				
				; set up the 6522 ports
				lda		#VIA_PCR
				sta		pcr		   ; write to peripheral control reg
				lda		#enable|cb1flag
				sta		ier
				
				; set up the 6522 timer1
				ldd		#timeconst
				exg		a,b
				std		t1cl
				lda		acr
				ora		#t1flag
				sta		acr
				
				; set up the 6551
				sta		acia_reset
				lda		acia_status
				anda	#(not_dcd | not_dsr)
				sta		prev_bits
				lda		#dtr | tx_enable ; | rx_echo ; | parity_check | parity_even
				sta		acia_command
				lda		#rx_clock | word_8_bits | stop_1_bits | baud_9600
				sta		acia_control

				; hook the NMI vector
				ldx		#nmi_isr
				stx		nmivec
				
				; send the startup message
				ldx		#message
				jsr		outstring
				jsr		chk_mem
				
loop:			jsr		nmi_chk
				jsr		tick_chk
				jsr		uart_chk
				sbra	loop
			end
		

outbyte:	begin
				sta		portb
loop:		  	lda		ifr		; wait for data taken
				anda	#cb1flag
				sbeq	loop
				rts
			end

			begin
loop1:			sta		portb
loop2:		  	lda		ifr		; wait for data taken
				anda	#cb1flag
				sbeq	loop2
outstring		entry
				lda		,x+		; get next char
				sbne	loop1
exit:			rts
			end



chk_mem:	begin
				ldx   #0000
				bsr   newline

loop:		  	lda   ,x
				tfr   a,b
				comb
				stb   ,x
				cmpb  ,x
				sbne   notram

isram:		  	sta   ,x
				lda   good
				bne   next

				inca
				sta   good
				tfr	x,d
				bsr   hex_word
				bsr   dash
				bra   next

notram:		  	lda   good
				beq   next

				clra
				sta   good
				tfr   x,d
				subd  #1
				bsr   hex_word
				bsr   newline

next:		  	leax  256,x
				cmpx  #$fe00
				bne   loop

				tfr   x,d
				subd  #1
				bsr   hex_word
				bsr   newline
				bsr   newline
				rts
			end

			begin
message:	  	db		" - ", 0

dash		entry
				pshs	x
				ldx		#message
				bsr		outstring
				puls	x
				rts
			end
			
newline:	begin
				lda   	#10
				bsr   	outbyte
				lda   	#13
				bsr   	outbyte
				rts
			end


hex_nybble:	begin
				pshs	a,b
				anda	#$0F
				cmpa	#$A
				sbhs	alpha

				adda	#'0'
				sbra	over

alpha:		    adda	#('A' - $A)

over:		    bsr	outbyte
				puls	a,b,pc
			end

hex_byte:	begin
				pshs	a
				lsra
				lsra
				lsra
				lsra
				jsr		hex_nybble
				puls	a
				jsr		hex_nybble
				rts
			end

hex_word:	begin
				pshs	d
				jsr		hex_byte
				lda		1,s
				jsr		hex_byte
				puls	d,pc
			end
